{
	
  "C++": {
	"prefix": "c++",
	"body": [
		"",
		"#include <iostream>",
		"#include <string>",
		"#include <math.h>",
		"#include <climits>",
		"#include <vector>",
		"#include <algorithm>",
		"#include <iomanip>",
		"#include <utility>",
		"using namespace std;",
		"typedef long long ll;",
		"typedef double db;",
		"const long long mod = 1e9 + 7;",
		"int main () {",
		"    ios_base::sync_with_stdio(0);",
		"    cin.tie(NULL);",
		"    cout.tie(NULL);",
		"    return 0;",
		"}"
	],
	"description": "C++"
  },
  "CombinationQL": {
	"prefix": "tohopql",
	"body": [
	  "int n, k, a[100000];",
	  "void out_put()",
	  "{",
	  "    for (int i = 1; i <= k; i++)",
	  "        cout << a[i] << \" \";",
	  "    cout << endl;",
	  "}",
	  "void backtracking(int i)",
	  "{",
	  "    for (int j = a[i - 1] + 1; j <= n - k + i; j++)",
	  "    {",
	  "        a[i] = j;",
	  "        if (i == k)",
	  "            out_put();",
	  "        else",
	  "            backtracking(i + 1);",
	  "    }",
	  "}",
	  "void ToHop () {",
	  "    cin >> n >> k;",
	  "    backtracking(1);",
	  "}"
	],
	"description": "ToHopQL"
  },
  "CombinationSinh": {
	"prefix": "tohopsinh",
	"body": [
	  "int n, k, c[100000];",
	  "bool stop;",
	  "void init()",
	  "{",
	  "    cin >> n >> k;",
	  "    for (int i = 1; i <= n; i++)",
	  "        c[i] = i;",
	  "    stop = false;",
	  "}",
	  "void result()",
	  "{",
	  "    for (int i = 1; i <= k; i++)",
	  "        cout << c[i] << \" \";",
	  "    cout << endl;",
	  "}",
	  "void next()",
	  "{",
	  "    int i = k;",
	  "    while (i > 0 && c[i] == n - k + i)",
	  "        i--;",
	  "    if (i > 0)",
	  "    {",
	  "        c[i] += 1;",
	  "        for (int j = i + 1; j <= k; j++)",
	  "        {",
	  "            c[j] = c[i] + j - i;",
	  "        }",
	  "    }",
	  "    else",
	  "        stop = true;",
	  "}",
	  "void combination()",
	  "{",
	  "    while (!stop)",
	  "    {",
	  "        result();",
	  "        next();",
	  "    }",
	  "}"
	],
	"description": "ToHopSinh"
  },
  "PermutationQL": {
	"prefix": "hoanviql",
	"body": [
	  "int n;",
	  "int a[100000];",
	  "bool check[10000];",
	  "void HoanVi(int i)",
	  "{",
	  "    for (int j = 1; j <= n; j++)",
	  "    {",
	  "        if (check[j] == false)",
	  "        {",
	  "            check[j] = true;",
	  "            a[i] = j;",
	  "            if (i == n - 1)",
	  "            {",
	  "                for (int k = 0; k < n; k++)",
	  "                    cout << a[k] << \" \";",
	  "                cout << endl;",
	  "            }",
	  "            else",
	  "                HoanVi(i + 1);",
	  "            check[j] = false;",
	  "        }",
	  "    }",
	  "}",
	  "void solution () {",
	  "    cin >> n;",
	  "    HoanVi(0);",
	  "}"
	],
	"description": "HoanViQL"
  },
  "CombinationNumber": {
	"prefix": "sotohop",
	"body": [
	  "void SoToHop ()",
	  "{",
	  "\tlong long dp[1005][1005];",
	  "\tfor(int i=0;i<=1000;i++){",
	  "\t\tfor(int j=0;j<=i;j++){",
	  "\t\t\tif(i==j||j==0) dp[i][j]=1;",
	  "\t\t\telse dp[i][j]=dp[i-1][j-1]+dp[i-1][j];",
	  "\t\t\tdp[i][j]%=mod;",
	  "\t\t}",
	  "\t}",
	  "}"
	],
	"description": "SoToHop"
  },

  "MS": {
	"prefix": "minSwap",
	"body": [
	  "int minSwap(int *a, int n, int k)",
	  "{",
	  "    int count = 0;",
	  "    for (int i = 0; i < n; i++)",
	  "        if (a[i] <= k)",
	  "            count++;",
	  "    int loai = 0;",
	  "    for (int i = 0; i < count; i++)",
	  "        if (a[i] > k)",
	  "            loai++;",
	  "    int ans = loai;",
	  "    for (int i = 0, j = count; j < n; j++, i++)",
	  "    {",
	  "        if (a[i] > k)",
	  "            loai--;",
	  "        if (a[j] > k)",
	  "            loai++;",
	  "        ans = (ans < loai) ? ans : loai;",
	  "    }",
	  "    return ans;",
	  "}"
	],
	"description": "MS"
  },
  "Fibonacci": {
	"prefix": "fibo",
	"body": [
	  "void fibo (int n) {",
	  "    if (n==2 || n==1)   cout << \"1\\n\";",
	  "    else {",
	  "        long long a0=1, a1=1, a2=a0+a1;",
	  "        int k=3;",
	  "        while (k<n) {",
	  "            a0=a1;",
	  "            a1=a2;",
	  "            a2=a0+a1;",
	  "            k++;",
	  "        }",
	  "        cout << a2 << endl;",
	  "    }",
	  "}"
	],
	"description": "Fibonacci"
  },
  "DateOfBirth": {
	"prefix": "dob",
	"body": [
		"    void solve(string &a)",
		"    {",
		"        if (a[2] != '/')",
		"            a.insert(0, \"0\");",
		"        if (a[5] != '/')",
		"            a.insert(3, \"0\");",
		"    }"
	],
	"description": "DateOfBirth"
  },
  "ChuanHoaTen": {
	"prefix": "SolveName",
	"body": [
	  "string solve_name (string &a)",
	  "{",
	  "    transform(a.begin(), a.end(), a.begin(), ::tolower);",
	  "    string s = {};",
	  "    stringstream ss(a);",
	  "    string token;",
	  "    while (getline(ss, token, ' '))",
	  "    {",
	  "        token[0] -= 32;",
	  "        s += token;",
	  "        s += ' ';",
	  "    }",
	  "    return s;",
	  "}"
	],
	"description": "ChuanHoaTen"
  },
  "OY": {
	"prefix": "oldYoung",
	"body": [
	  "void solve_dob (in4 &a) {",
	  "    stack<char> x;",
	  "    for (int i=a.dob.size()-1; i>=-1; i--) {",
	  "        if (a.dob[i] != '/' && i != -1) {",
	  "            x.push(a.dob[i]);",
	  "        }",
	  "        else {",
	  "            while (!x.empty()) {",
	  "                a.compare += x.top();",
	  "                x.pop();",
	  "            }",
	  "        }",
	  "    }",
	  "}",
	  "bool can_swap (in4 &a, in4 &b) {",
	  "    return a.compare > b.compare;",
	  "}"
	],
	"description": "OY"
  },
  "Prime": {
	"prefix": "prime",
	"body": [
	  "bool prime (long long n) {",
	  "    if (n<2)    return 0;",
	  "    if (n%2 == 0 && n>2)    return 0;",
	  "    for (int i=3; i<=sqrt(n); i+=2) {",
	  "        if (n%i == 0)   return false;",
	  "    }",
	  "    return true;",
	  "}"
	],
	"description": "Prime"
  },
  "SievePrime": {
	"prefix": "sievePrime",
	"body": [
	  "void sievePrime () {",
	  "    a[0]=1, a[1]=1;",
	  "    for (long long i=2; i<=sqrt(100000); i++)",
	  "        for (long long j=i*i; j<=100000; j+=i)",
	  "            if (a[i]==0)",
	  "                a[j] = 1;",
	  "}"
	],
	"description": "SievePrime"
  },
  "PerfectNumber": {
	"prefix": "perfectNumber",
	"body": [
	  "void perfecrNumber () {",
	  "    vector<long long> pn;",
	  "    long long i1 = 2, i2 = 2;",
	  "    for (int i = 2; i <= 19; i++) {",
	  "        i2 *= 2;",
	  "        if (prime(i))   pn.push_back(i1*(i2-1));",
	  "        i1 *= 2;",
	  "    }",
	  "    for (auto i : pn) cout << i << \" \";",
	  "}"
	],
	"description": "PerfectNumber"
  },
  "BinarySearch": {
	"prefix": "BinarySearch",
	"body": [
	  "int BinarySearch(int *a, int l, int r, int x)",
	  "{",
	  "    if (l <= r)",
	  "    {",
	  "        int mid = (r + l) / 2;",
	  "        if (x == a[mid])",
	  "            return 1;",
	  "        if (x > a[mid])",
	  "            return BinarySearch(a, mid + 1, r, x);",
	  "        if (x < a[mid])",
	  "            return BinarySearch(a, l, mid - 1, x);",
	  "    }",
	  "    return -1;",
	  "}"
	],
	"description": "BinarySearch"
  },
  "ThuanNghich": {
	"prefix": "thuanNghich",
	"body": [
	  "int thuanNghich (string s) {",
	  "    for (int i=0; i<=s.length()/2; i++) {",
	  "        if (s[i] != s[s.length()-1-i])  return 0;",
	  "    }",
	  "    return 1;",
	  "}"
	],
	"description": "ThuanNghich"
  },
  "ShortestSubsequences": {
	"prefix": "shortestSubsequences",
	"body": [
	  "void shortestSubsequences () {",
	  "    if (sum < x)",
	  "        cout << \"-1\\n\";",
	  "    ",
	  "    else",
	  "    {",
	  "        deque<int> ans;",
	  "        long long s = 0;",
	  "        int min = __INT_MAX__;",
	  "        for (int i = 0; i < n; i++)",
	  "        {",
	  "            ans.push_back(a[i]);",
	  "            s += a[i];",
	  "            if (s > x)",
	  "            {",
	  "                while (s - ans.front() > x)",
	  "                {",
	  "                    s -= ans.front();",
	  "                    ans.pop_front();",
	  "                }",
	  "                min = (min > ans.size()) ? ans.size() : min;",
	  "            }",
	  "        }",
	  "        cout << min << endl;",
	  "    }",
	  "}"
	],
	"description": "ShortestSubsequences"
  },

// tổng dãy con lớn nhất

  "subsequenceSumDiscontinuous": {
	"prefix": "maxSumDiscontinuous",
	"body": [
	  "void sumMax ()",
	  "{",
	  "    int n;",
	  "    cin >> n;",
	  "    int a[n];",
	  "    long long dp[n] = {0}, MAX = -1;",
	  "    for (int i = 0; i < n; i++)",
	  "        cin >> a[i];",
	  "    dp[0] = a[0];",
	  "    dp[1] = max(a[0], a[1]);",
	  "    for (int i = 2; i < n; i++)",
	  "    {",
	  "        dp[i] = max(dp[i - 2] + a[i], dp[i - 1]);",
	  "    }",
	  "    cout << dp[n-1] << endl;",
	  "}"
	],
	"description": "subsequenceSumDiscontinuous"
  },
  "subsequenceSumContinuous": {
	"prefix": "maxSumContinuous",
	"body": [
	  "void maxSum",
	  "{",
	  "    int n;",
	  "    cin >> n;",
	  "    // nếu mảng không có phần tử nào >=0 thì trả về -1",
	  "    long long sum = 0, summax = -1;",
	  "    for (int i = 0; i < n; i++)",
	  "    {",
	  "        int x;",
	  "        cin >> x;",
	  "        sum += x;",
	  "        if (summax < sum)",
	  "            summax = sum;",
	  "        if (sum < 0)",
	  "            sum = 0;",
	  "    }",
	  "    cout << summax << endl;",
	  "}"
	],
	"description": "subsequenceSumContinuous"
  },

// xử lý số nguyên lớn

  "hieusnl": {
	"prefix": "hieuSnl",
	"body": [
	  "void HieuSnl (string s1, string s2)",
	  "{",
	  "    vector<int> s;",
	  "    reverse(s1.begin(), s1.end());",
	  "    reverse(s2.begin(), s2.end());",
	  "    s1.resize(s2.size(), '0');",
	  "    int vay = 0;",
	  "    for (int i = 0; i < s2.size(); i++)",
	  "    {",
	  "        int k = s2[i] - s1[i] - vay;",
	  "        vay = 0;",
	  "        if (k >= 0)",
	  "            s.push_back(k);",
	  "        else",
	  "        {",
	  "            vay = 1;",
	  "            k += 10;",
	  "            s.push_back(k);",
	  "        }",
	  "    }",
	  "    reverse(s.begin(), s.end());",
	  "    for (int i : s)",
	  "        cout << i;",
	  "    cout << endl;",
	  "}"
	],
	"description": "hieusnl"
  },
  "tongsnl": {
	"prefix": "tongSnl",
	"body": [
	  "void TongSnl (string s1, string s2)",
	  "{",
	  "    vector<int> s;",
	  "    reverse(s1.begin(), s1.end());",
	  "    reverse(s2.begin(), s2.end());",
	  "    s1.resize(s2.size(), '0');",
	  "    int du = 0;",
	  "    for (int i = 0; i < s2.size(); i++)",
	  "    {",
	  "        int k = s1[i] - '0' + s2[i] - '0' + du;",
	  "        du = 0;",
	  "        if (k < 10)",
	  "            s.push_back(k);",
	  "        else",
	  "        {",
	  "            du = 1;",
	  "            k -= 10;",
	  "            s.push_back(k);",
	  "        }",
	  "    }",
	  "    if (du == 1)",
	  "        s.push_back(1);",
	  "    reverse(s.begin(), s.end());",
	  "    for (int i : s)",
	  "        cout << i;",
	  "    cout << endl;",
	  "}"
	],
	"description": "tongsnl"
  },
  "ChiaDuLuyThua": {
	"prefix": "chiadusnl",
	"body": [
	  "void ChiaDuSnl ()",
	  "{",
	  "    string a;",
	  "    vector<int> ans;",
	  "    long long m, n = 0;",
	  "    cin >> a >> m;",
	  "    for (int i = 0; i < a.size(); i++)",
	  "    {",
	  "        int k = a[i] - '0';",
	  "        n = (n * 10) % m + k;",
	  "        n %= m;",
	  "        ans.push_back(k);",
	  "    }",
	  "    cout << n % m << endl;",
	  "}"
	],
	"description": "ChiaDuLuyThua"
  },
  "tichsnl": {
	"prefix": "tichSnl",
	"body": [
	  "string cong (string a, string b){",
	  "\tstring s=\"\";",
	  "\tif (a.size() > b.size()) b.insert (0, a.size() - b.size(), '0');",
	  "\telse if (a.size() < b.size()) a.insert(0, b.size() - a.size(), '0');",
	  "\tint tmp = 0;",
	  "    for(int i=a.size()-1;i>=0;i--){",
	  "        tmp=a[i]+b[i]-96+tmp;",
	  "        s.insert(0,1,tmp%10+48);",
	  "        tmp=tmp/10;",
	  "    }",
	  "    if(tmp>0) s.insert(0,1,tmp+48);",
	  "    return s;",
	  "}",
	  "string nhanNho(char a,string b){",
	  "    string s=\"\";",
	  "    int temp=0;",
	  "    for(int i=b.length()-1;i>=0;i--){",
	  "        temp=(a-48)*(b[i]-48)+temp;",
	  "        s.insert(0,1,(temp%10+48));",
	  "        temp=temp/10;",
	  "    }",
	  "    if (temp>0){",
	  "        s.insert(0,1,(temp+48));",
	  "    } ",
	  "    return s;",
	  "}",
	  "string NhanSnl (string a, string b){",
	  "    string s=\"\";",
	  "    int l=a.length();",
	  "    string s1[l];",
	  "    for(int i=l-1;i>=0;i--){",
	  "        s1[i]=nhanNho(a[i],b);",
	  "        s1[i].insert(s1[i].length(),l-i-1,'0');   ",
	  "        s=cong(s,s1[i]);",
	  "    }",
	  "    return s;",
	  "}",
	],
	"description": "tichsnl"
  },
  
  "ltsnl": {
	"prefix": "luyThuaSnl",
	"body": [
	  "long long mu(long long a, long long b, long long mod)",
	  "{",
	  "    if (b == 0)",
	  "        return 1;",
	  "    else if (b == 1)",
	  "        return a % mod;",
	  "    else if (b % 2 == 0)",
	  "    {",
	  "        long long k = mu(a, b / 2, mod);",
	  "        return k % mod * k % mod;",
	  "    }",
	  "    else",
	  "    {",
	  "        long long k = mu(a, (b - 1) / 2, mod);",
	  "        return (a % mod) * k % mod * k % mod;",
	  "    }",
	  "}",
	  "void ChiaDu ()",
	  "{",
	  "    string a;",
	  "    long long b, m, n = 0;",
	  "    cin >> a >> b >> m;",
	  "    for (int i = 0; i < a.size(); i++)",
	  "    {",
	  "        int k = a[i] - '0';",
	  "        n = (n * 10) % m + k;",
	  "        n %= m;",
	  "    }",
	  "    cout << mu(n, b, m) << endl;",
	  "}"
	],
	"description": "ltsnl"
  },
  "FibonacciLon": {
	"prefix": "fibo_lon",
	"body": [
	  "void fibonacci()",
	  "{",
	  "    for (int i = 0; i <= 1000; i++)",
	  "    {",
	  "        if (i == 2 || i == 1)",
	  "            a[i] = 1;",
	  "        else",
	  "            a[i] = a[i - 1] + a[i - 2];",
	  "        a[i] %= mod;",
	  "    }",
	  "}"
	],
	"description": "FibonacciLon"
  },
  "ChiaDuTich": {
	"prefix": "chiaDuTich",
	"body": [
	  "long long chia(ll a, ll b, ll c)",
	  "{",
	  "    if (b == 1)",
	  "        return a % c;",
	  "    if (b == 0)",
	  "        return 0;",
	  "    if (b % 2 == 0)",
	  "        return 2 * chia(a, b / 2, c) % c;",
	  "    else",
	  "        return (a % c + 2 * chia(a, (b - 1) / 2, c)) % c;",
	  "}"
	],
	"description": "ChiaDuTich"
  },

// bài toán chia hết

  "mod5": {
	"prefix": "chia5",
	"body": [
	  "void ChiaHet5(string s)",
	  "{",
	  "    long long sum = 0;",
	  "    reverse(s.begin(), s.end());",
	  "    for (int i = 0; i < s.size(); i++)",
	  "    {",
	  "        if (s[i] == '1')",
	  "        {",
	  "            if (i % 4 == 0)",
	  "                sum += 1;",
	  "            if (i % 4 == 1)",
	  "                sum += 2;",
	  "            if (i % 4 == 2)",
	  "                sum += 4;",
	  "            if (i % 4 == 3)",
	  "                sum += 3;",
	  "        }",
	  "    }",
	  "    if (sum % 5 == 0)",
	  "        cout << \"Yes\\n\";",
	  "    else",
	  "        cout << \"No\\n\";",
	  "}"
	],
	"description": "mod5"
  },

  "mod": {
	"prefix": "chia8",
	"body": [
	  "long long SoXauConChiaHet_k(string s, int k)",
	  "{",
	  "    int index = 0, count = 0;",
	  "    for (int i = 0; i < s.size(); i++)",
	  "    {",
	  "        index = 0;",
	  "        for (int j = i; j < s.size(); j++)",
	  "        {",
	  "            index = index * 10 + s[j] - '0';",
	  "            if (index % k == 0)",
	  "                count++;",
	  "            index %= k;",
	  "        }",
	  "    }",
	  "    return count;",
	  "}"
	],
	"description": "mod"
  },
  "mod11": {
	"prefix": "chia11",
	"body": [
	  "void ChiaHet11(string s)",
	  "{",
	  "    long long even = 0, odd = 0;",
	  "    for (int i = 0; i < s.size(); i++)",
	  "    {",
	  "        if (i % 2 == 0)",
	  "            even += s[i] - '0';",
	  "        else",
	  "            odd += s[i] - '0';",
	  "    }",
	  "    if (abs(even - odd) % 11 == 0)",
	  "        cout << \"1\\n\";",
	  "    else",
	  "        cout << \"0\\n\";",
	  "}"
	],
	"description": "mod11"
  },

// ma trận 

  "MTXO": {
	"prefix": "XoanOcNguoc",
	"body": [
	  "vector<int> ans;",
	  "void input(int a[][100], int n, int m)",
	  "{",
	  "    for (int i = 0; i < n; i++)",
	  "        for (int j = 0; j < m; j++)",
	  "            cin >> a[i][j];",
	  "}",
	  "void solve(int a[][100], int n, int m)",
	  "{",
	  "    int row = n - 1, col = m - 1, r = 0, c = 0;",
	  "    while (ans.size() < m * n)",
	  "    {",
	  "        for (int i = c; i <= col; i++)",
	  "            ans.push_back(a[r][i]);",
	  "        for (int i = r + 1; i <= row; i++)",
	  "            ans.push_back(a[i][col]);",
	  "        for (int i = col - 1; i >= c; i--)",
	  "            ans.push_back(a[row][i]);",
	  "        for (int i = row - 1; i > r; i--)",
	  "            ans.push_back(a[i][c]);",
	  "        r++, c++, col--, row--;",
	  "    }",
	  "    for (int i = m * n - 1; i >= 0; i--)",
	  "        cout << ans[i] << \" \";",
	  "    cout << endl;",
	  "    ans.clear();",
	  "}"
	],
	"description": "MTXO"
  },
  "Nhan": {
	"prefix": "matrixMultiplication",
	"body": [
	  "void input(int a[][100], int n, int m)",
	  "{",
	  "    for (int i = 0; i < n; i++)",
	  "        for (int j = 0; j < m; j++)",
	  "            cin >> a[i][j];",
	  "}",
	  "void solve(int a[][100], int b[][100], int n, int m, int p)",
	  "{",
	  "    for (int i = 0; i < n; i++)",
	  "    {",
	  "        for (int j = 0; j < p; j++)",
	  "        {",
	  "            int s = 0;",
	  "            for (int k = 0; k < m; k++)",
	  "            {",
	  "                s += a[i][k] * b[k][j];",
	  "            }",
	  "            cout << s << \" \";",
	  "        }",
	  "        cout << endl;",
	  "    }",
	  "}"
	],
	"description": "Nhan"
  },
  "Xoay": {
	"prefix": "matrixRotate",
	"body": [
	  "void input(int a[][100], int n, int m)",
	  "{",
	  "    for (int i = 0; i < n; i++)",
	  "        for (int j = 0; j < m; j++)",
	  "            cin >> a[i][j];",
	  "}",
	  "void rotate (int a[][100], int b[][100], int n, int m)",
	  "{",
	  "    for (int k = 0; k < m / 2; k++)",
	  "    {",
	  "        for (int i = k + 1; i < m - k; i++)",
	  "            b[k][i] = a[k][i - 1];",
	  "        for (int i = k + 1; i < n - k; i++)",
	  "            b[i][m - k - 1] = a[i - 1][m - k - 1];",
	  "        for (int i = m - k - 2; i >= k; i--)",
	  "            b[n - k - 1][i] = a[n - k - 1][i + 1];",
	  "        for (int i = n - k - 2; i >= k; i--)",
	  "            b[i][k] = a[i + 1][k];",
	  "    }",
	  "}",
	  "void output(int a[][100], int b[][100], int n, int m)",
	  "{",
	  "    for (int i = 0; i < n; i++)",
	  "    {",
	  "        for (int j = 0; j < m; j++)",
	  "        {",
	  "            if (b[i][j] == 0)",
	  "                b[i][j] = a[i][j];",
	  "            cout << b[i][j] << \" \";",
	  "        }",
	  "    }",
	  "    cout << endl;",
	  "}"
	],
	"description": "Xoay"
  },

// diện tích đa giác

  "DaGiac": {
	"prefix": "dientich",
	"body": [
	  "    void DienTichDaGiac()",
	  "    {",
	  "        int n;",
	  "        cin >> n;",
	  "        int a[n + 2], b[n + 2];",
	  "        for (int i = 0; i < n; i++)",
	  "            cin >> a[i] >> b[i];",
	  "        a[n] = a[0], b[n] = b[0];",
	  "        long long s1 = 0, s2 = 0;",
	  "        for (int i = 0; i < n; i++)",
	  "        {",
	  "            s1 += a[i] * b[i + 1];",
	  "            s2 += b[i] * a[i + 1];",
	  "        }",
	  "        cout << fixed << setprecision(3) << (double)(s1 - s2) / 2 << endl;",
	  "    }"
	],
	"description": "DaGiac"
  },
  "TamGiacVuong": {
	"prefix": "TamGiacVuong",
	"body": [
	  "void TamGiacVuong",
	  "{",
	  "    int n;",
	  "    cin >> n;",
	  "    long long a[n];",
	  "    for (int i = 0; i < n; i++)",
	  "    {",
	  "        cin >> a[i];",
	  "        a[i] *= a[i];",
	  "    }",
	  "    sort(a, a + n);",
	  "    int x1 = n - 1, x2 = x1 - 1, x3 = 0, check = 0;",
	  "    while (x2 != 0 && a[x1] != a[x2] + a[x3])",
	  "    {",
	  "        if (a[x2] + a[x3] < a[x1])",
	  "            x3++;",
	  "        else if (a[x2] + a[x3] > a[x1])",
	  "            x2--;",
	  "        if (x2 == x3)",
	  "        {",
	  "            x1--;",
	  "            x2 = x1 - 1;",
	  "            x3 = 0;",
	  "        }",
	  "    }",
	  "    if (x2 != 0)",
	  "        cout << \"YES\\n\";",
	  "    else",
	  "        cout << \"NO\\n\";",
	  "}"
	],
	"description": "TamGiacVuong"
  },

  "DFS": {
	"prefix": "dfs",
	"body": [
	  "",
	  "int n, m, a[105][105];",
	  "int row[] = {-1, 0, 1, 1, 1, 0, -1, -1};",
	  "int col[] = {-1, -1, -1, 0, 1, 1, 1, 0};",
	  "bool visited[100][100];",
	  "void init()",
	  "{",
	  "    cin >> n >> m;",
	  "    for (int i = 0; i < n; i++)",
	  "        for (int j = 0; j < m; j++)",
	  "        {",
	  "            cin >> a[i][j];",
	  "            visited[i][j] = false;",
	  "        }",
	  "}",
	  "bool check(int i, int j)",
	  "{",
	  "    return (i >= 0 && i <= n && j >= 0 && j <= m && a[i][j] == 1 && !visited[i][j]) ? true : false;",
	  "}",
	  "void dfs(int i, int j)",
	  "{",
	  "    visited[i][j] = true;",
	  "    for (int k = 0; k < 8; k++)",
	  "        if (check(i + col[k], j + row[k]))",
	  "            dfs(i + col[k], j + row[k]);",
	  "}",
	  "void solve()",
	  "{",
	  "    int count = 0;",
	  "    for (int i = 0; i < n; i++)",
	  "        for (int j = 0; j < m; j++)",
	  "            if (a[i][j] == 1 && !visited[i][j])",
	  "            {",
	  "                dfs(i, j);",
	  "                count++;",
	  "            }",
	  "    cout << count << endl;",
	  "}"
	],
	"description": "DFS"
  },

// class

  "IFriend": {
	"prefix": "friendInput",
	"body": [
	  "    friend istream &operator>>(istream &is, SinhVien &a)",
	  "    {  // cin >> a",
	  "        scanf(\"\\n\");",
	  "        getline(is, a.name);",
	  "        is >> a.lop >> a.dob >> a.gpa;",
	  "        return is;",
	  "    }"
	],
	"description": "IFriend"
  },
  "OFriend": {
	"prefix": "friendOutput",
	"body": [
	  "    friend ostream &operator<<(ostream &os, SinhVien &a)",
	  "    {  // cout << a;",
	  "        a.solve_name(a);",
	  "        a.solve_dob(a);",
	  "        os << \"B20DCCN001 \" << a.name << a.lop << \" \" << a.dob << \" \";",
	  "        os << fixed << setprecision(2) << a.gpa << endl;",
	  "        return os;",
	  "    }"
	],
	"description": "OFriend"
  },

// file
 
  "File": {
	"prefix": "copyFile",
	"body": [
	  "void copy_file(char *f1, char *f2)",
	  "{",
	  "    ifstream fp1; // khai bao file de doc",
	  "    fp1.open(f1); // mo file de doc",
	  "    ofstream fp2; // khai bao file de ghi",
	  "    fp2.open(f2); // mo file de ghi",
	  "    string line;",
	  "    while (!fp1.eof())",
	  "    {",
	  "        getline (fp1, line);",
	  "        cout << line << endl;",
	  "        fp2 << line << endl;",
	  "    }",
	  "    fp1.close(); // dong file",
	  "    fp2.close();",
	  "}"
	],
	"description": "File"
  },


}
